
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace zip_glm_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 73> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 30, column 4 to column 42)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 31, column 4 to column 41)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 32, column 4 to column 50)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 33, column 4 to column 53)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 34, column 4 to column 33)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 35, column 4 to column 34)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 36, column 4 to column 36)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 39, column 4 to column 181)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 40, column 4 to column 139)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 41, column 4 to column 111)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 42, column 4 to column 51)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 43, column 4 to column 125)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 44, column 4 to column 103)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 48, column 4 to column 55)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 49, column 4 to column 54)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 50, column 4 to column 81)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 51, column 4 to column 79)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 52, column 4 to column 67)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 53, column 4 to column 66)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 56, column 8 to column 31)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 58, column 12 to column 35)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 59, column 12 to column 83)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 57, column 23 to line 60, column 9)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 57, column 8 to line 60, column 9)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 55, column 19 to line 61, column 5)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 55, column 4 to line 61, column 5)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 11, column 4 to column 11)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 12, column 4 to column 13)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 13, column 4 to column 12)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 14, column 10 to column 14)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 14, column 4 to column 26)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 15, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 15, column 16 to column 20)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 15, column 4 to column 35)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 16, column 4 to column 11)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 17, column 4 to column 13)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 18, column 4 to column 12)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 19, column 10 to column 14)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 19, column 4 to column 26)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 20, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 20, column 16 to column 20)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 20, column 4 to column 35)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 21, column 10 to column 12)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 21, column 13 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 21, column 4 to column 27)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 22, column 4 to column 23)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 23, column 4 to column 23)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 26, column 10 to column 16)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 26, column 4 to column 29)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 27, column 21 to column 48)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 27, column 4 to column 48)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 32, column 20 to column 29)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 33, column 20 to column 33)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 34, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 34, column 16 to column 20)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 35, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 35, column 16 to column 22)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 36, column 11 to column 13)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 39, column 20 to column 23)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 39, column 24 to column 27)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 40, column 20 to column 23)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 40, column 24 to column 29)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 41, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 41, column 16 to column 20)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 42, column 11 to column 15)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 42, column 16 to column 22)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 6, column 12 to column 79)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 5, column 15 to line 7, column 9)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 4, column 12 to column 63)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 3, column 18 to line 5, column 9)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 3, column 8 to line 7, column 9)",
 " (in '/Users/Ryan/scripts/analysis_templates/microbiomes/zip_glm/zip_glm.stan', line 2, column 41 to line 8, column 5)"};


template <bool propto__, typename T1__, typename T2__>
stan::promote_args_t<T1__,
T2__>
zip_lpmf(const int& c, const T1__& p, const T2__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 71;
    if (logical_gt(c, 0)) {
      current_statement__ = 69;
      return (log_inv_logit(p) + poisson_log_lpmf<false>(c, a));
    } else {
      current_statement__ = 67;
      return log_sum_exp(log1m_inv_logit(p),
               (log_inv_logit(p) - stan::math::exp(a)));
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct zip_lpmf_functor__ {
template <bool propto__, typename T1__, typename T2__>
stan::promote_args_t<T1__,
T2__>
operator()(const int& c, const T1__& p, const T2__& a,
           std::ostream* pstream__)  const 
{
return zip_lpmf<propto__>(c, p, a, pstream__);
}
};

class zip_glm_model final : public model_base_crtp<zip_glm_model> {

 private:
  int NS;
  int NB_s;
  int NSB;
  std::vector<int> idx_s;
  Eigen::Matrix<double, -1, -1> X_s_full_inv__;
  int NF;
  int NB_f;
  int NFB;
  std::vector<int> idx_f;
  Eigen::Matrix<double, -1, -1> X_f_full_inv__;
  std::vector<std::vector<int>> count;
  double prior_scale_p;
  double prior_scale_a;
  std::vector<int> idx_f2;
  int sd_prevalence_norm_1dim__;
  int sd_abundance_norm_1dim__;
  int abundance_2dim__;
  int sd_abundance_2dim__;
  int beta_abundance_2dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_s_full_inv{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_f_full_inv{nullptr, 0, 0};
 
 public:
  ~zip_glm_model() { }
  
  inline std::string model_name() const final { return "zip_glm_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  zip_glm_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_glm_model_namespace::zip_glm_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","NS","int",
           std::vector<size_t>{});
      NS = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      NS = context__.vals_i("NS")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","NB_s","int",
           std::vector<size_t>{});
      NB_s = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      NB_s = context__.vals_i("NB_s")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","NSB","int",
           std::vector<size_t>{});
      NSB = std::numeric_limits<int>::min();
      
      current_statement__ = 29;
      NSB = context__.vals_i("NSB")[(1 - 1)];
      current_statement__ = 30;
      validate_non_negative_index("idx_s", "NB_s", NB_s);
      current_statement__ = 31;
      context__.validate_dims("data initialization","idx_s","int",
           std::vector<size_t>{static_cast<size_t>(NB_s)});
      idx_s = std::vector<int>(NB_s, std::numeric_limits<int>::min());
      
      current_statement__ = 31;
      idx_s = context__.vals_i("idx_s");
      current_statement__ = 32;
      validate_non_negative_index("X_s_full_inv", "NB_s", NB_s);
      current_statement__ = 33;
      validate_non_negative_index("X_s_full_inv", "NB_s", NB_s);
      current_statement__ = 34;
      context__.validate_dims("data initialization","X_s_full_inv","double",
           std::vector<size_t>{static_cast<size_t>(NB_s),
            static_cast<size_t>(NB_s)});
      X_s_full_inv__ = Eigen::Matrix<double, -1, -1>(NB_s, NB_s);
      new (&X_s_full_inv) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_s_full_inv__.data(), NB_s, NB_s);
      
      
      {
        std::vector<local_scalar_t__> X_s_full_inv_flat__;
        current_statement__ = 34;
        X_s_full_inv_flat__ = context__.vals_r("X_s_full_inv");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= NB_s; ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            current_statement__ = 34;
            assign(X_s_full_inv, X_s_full_inv_flat__[(pos__ - 1)],
              "assigning variable X_s_full_inv", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 34;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 35;
      context__.validate_dims("data initialization","NF","int",
           std::vector<size_t>{});
      NF = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      NF = context__.vals_i("NF")[(1 - 1)];
      current_statement__ = 36;
      context__.validate_dims("data initialization","NB_f","int",
           std::vector<size_t>{});
      NB_f = std::numeric_limits<int>::min();
      
      current_statement__ = 36;
      NB_f = context__.vals_i("NB_f")[(1 - 1)];
      current_statement__ = 37;
      context__.validate_dims("data initialization","NFB","int",
           std::vector<size_t>{});
      NFB = std::numeric_limits<int>::min();
      
      current_statement__ = 37;
      NFB = context__.vals_i("NFB")[(1 - 1)];
      current_statement__ = 38;
      validate_non_negative_index("idx_f", "NB_f", NB_f);
      current_statement__ = 39;
      context__.validate_dims("data initialization","idx_f","int",
           std::vector<size_t>{static_cast<size_t>(NB_f)});
      idx_f = std::vector<int>(NB_f, std::numeric_limits<int>::min());
      
      current_statement__ = 39;
      idx_f = context__.vals_i("idx_f");
      current_statement__ = 40;
      validate_non_negative_index("X_f_full_inv", "NB_f", NB_f);
      current_statement__ = 41;
      validate_non_negative_index("X_f_full_inv", "NB_f", NB_f);
      current_statement__ = 42;
      context__.validate_dims("data initialization","X_f_full_inv","double",
           std::vector<size_t>{static_cast<size_t>(NB_f),
            static_cast<size_t>(NB_f)});
      X_f_full_inv__ = Eigen::Matrix<double, -1, -1>(NB_f, NB_f);
      new (&X_f_full_inv) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_f_full_inv__.data(), NB_f, NB_f);
      
      
      {
        std::vector<local_scalar_t__> X_f_full_inv_flat__;
        current_statement__ = 42;
        X_f_full_inv_flat__ = context__.vals_r("X_f_full_inv");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
          current_statement__ = 42;
          for (int sym2__ = 1; sym2__ <= NB_f; ++sym2__) {
            current_statement__ = 42;
            assign(X_f_full_inv, X_f_full_inv_flat__[(pos__ - 1)],
              "assigning variable X_f_full_inv", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 42;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 43;
      validate_non_negative_index("count", "NF", NF);
      current_statement__ = 44;
      validate_non_negative_index("count", "NS", NS);
      current_statement__ = 45;
      context__.validate_dims("data initialization","count","int",
           std::vector<size_t>{static_cast<size_t>(NF),
            static_cast<size_t>(NS)});
      count = std::vector<std::vector<int>>(NF, std::vector<int>(NS, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> count_flat__;
        current_statement__ = 45;
        count_flat__ = context__.vals_i("count");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
          current_statement__ = 45;
          for (int sym2__ = 1; sym2__ <= NF; ++sym2__) {
            current_statement__ = 45;
            assign(count, count_flat__[(pos__ - 1)],
              "assigning variable count", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 45;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      context__.validate_dims("data initialization","prior_scale_p","double",
           std::vector<size_t>{});
      prior_scale_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      prior_scale_p = context__.vals_r("prior_scale_p")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization","prior_scale_a","double",
           std::vector<size_t>{});
      prior_scale_a = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      prior_scale_a = context__.vals_r("prior_scale_a")[(1 - 1)];
      current_statement__ = 48;
      validate_non_negative_index("idx_f2", "NB_f - 1", (NB_f - 1));
      current_statement__ = 49;
      idx_f2 = std::vector<int>((NB_f - 1), std::numeric_limits<int>::min());
      
      current_statement__ = 51;
      for (int f = 2; f <= NB_f; ++f) {
        current_statement__ = 50;
        assign(idx_f2, (rvalue(idx_f, "idx_f", index_uni(f)) - 1),
          "assigning variable idx_f2", index_uni((f - 1)));
      }
      current_statement__ = 52;
      sd_prevalence_norm_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      sd_prevalence_norm_1dim__ = ((NSB * NFB) - 2);
      current_statement__ = 52;
      validate_non_negative_index("sd_prevalence_norm", "NSB * NFB - 2",
                                  sd_prevalence_norm_1dim__);
      current_statement__ = 53;
      sd_abundance_norm_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      sd_abundance_norm_1dim__ = ((NSB * (NFB - 1)) - 1);
      current_statement__ = 53;
      validate_non_negative_index("sd_abundance_norm", "NSB * (NFB - 1) - 1",
                                  sd_abundance_norm_1dim__);
      current_statement__ = 54;
      validate_non_negative_index("prevalence", "NB_s", NB_s);
      current_statement__ = 55;
      validate_non_negative_index("prevalence", "NB_f", NB_f);
      current_statement__ = 56;
      validate_non_negative_index("abundance", "NB_s", NB_s);
      current_statement__ = 57;
      abundance_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 57;
      abundance_2dim__ = (NB_f - 1);
      current_statement__ = 57;
      validate_non_negative_index("abundance", "NB_f - 1", abundance_2dim__);
      current_statement__ = 58;
      validate_non_negative_index("multinomial_nuisance", "NS", NS);
      current_statement__ = 59;
      validate_non_negative_index("sd_prevalence", "NSB", NSB);
      current_statement__ = 60;
      validate_non_negative_index("sd_prevalence", "NFB", NFB);
      current_statement__ = 61;
      validate_non_negative_index("sd_abundance", "NSB", NSB);
      current_statement__ = 62;
      sd_abundance_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 62;
      sd_abundance_2dim__ = (NFB - 1);
      current_statement__ = 62;
      validate_non_negative_index("sd_abundance", "NFB - 1",
                                  sd_abundance_2dim__);
      current_statement__ = 63;
      validate_non_negative_index("beta_prevalence", "NB_s", NB_s);
      current_statement__ = 64;
      validate_non_negative_index("beta_prevalence", "NB_f", NB_f);
      current_statement__ = 65;
      validate_non_negative_index("beta_abundance", "NB_s", NB_s);
      current_statement__ = 66;
      beta_abundance_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 66;
      beta_abundance_2dim__ = (NB_f - 1);
      current_statement__ = 66;
      validate_non_negative_index("beta_abundance", "NB_f - 1",
                                  beta_abundance_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + sd_prevalence_norm_1dim__
       + sd_abundance_norm_1dim__ + (NB_s * NB_f) + (NB_s * abundance_2dim__)
       + NS;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_glm_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ global_scale_prevalence;
      global_scale_prevalence = DUMMY_VAR__;
      
      current_statement__ = 1;
      global_scale_prevalence = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                                  0, lp__);
      local_scalar_t__ global_scale_abundance;
      global_scale_abundance = DUMMY_VAR__;
      
      current_statement__ = 2;
      global_scale_abundance = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                                 0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_prevalence_norm;
      sd_prevalence_norm = Eigen::Matrix<local_scalar_t__, -1, 1>(sd_prevalence_norm_1dim__);
      stan::math::fill(sd_prevalence_norm, DUMMY_VAR__);
      
      current_statement__ = 3;
      sd_prevalence_norm = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                             0, lp__, sd_prevalence_norm_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_abundance_norm;
      sd_abundance_norm = Eigen::Matrix<local_scalar_t__, -1, 1>(sd_abundance_norm_1dim__);
      stan::math::fill(sd_abundance_norm, DUMMY_VAR__);
      
      current_statement__ = 4;
      sd_abundance_norm = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                            0, lp__, sd_abundance_norm_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> prevalence;
      prevalence = Eigen::Matrix<local_scalar_t__, -1, -1>(NB_s, NB_f);
      stan::math::fill(prevalence, DUMMY_VAR__);
      
      current_statement__ = 5;
      prevalence = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                     NB_s, NB_f);
      Eigen::Matrix<local_scalar_t__, -1, -1> abundance;
      abundance = Eigen::Matrix<local_scalar_t__, -1, -1>(NB_s, abundance_2dim__);
      stan::math::fill(abundance, DUMMY_VAR__);
      
      current_statement__ = 6;
      abundance = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    NB_s, abundance_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> multinomial_nuisance;
      multinomial_nuisance = Eigen::Matrix<local_scalar_t__, -1, 1>(NS);
      stan::math::fill(multinomial_nuisance, DUMMY_VAR__);
      
      current_statement__ = 7;
      multinomial_nuisance = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               NS);
      Eigen::Matrix<local_scalar_t__, -1, -1> sd_prevalence;
      sd_prevalence = Eigen::Matrix<local_scalar_t__, -1, -1>(NSB, NFB);
      stan::math::fill(sd_prevalence, DUMMY_VAR__);
      
      current_statement__ = 8;
      assign(sd_prevalence,
        multiply(
          to_matrix(
            append_row((100 * global_scale_prevalence),
              append_row(sd_prevalence_norm, global_scale_prevalence)), NSB,
            NFB), prior_scale_p), "assigning variable sd_prevalence");
      Eigen::Matrix<local_scalar_t__, -1, -1> sd_abundance;
      sd_abundance = Eigen::Matrix<local_scalar_t__, -1, -1>(NSB, sd_abundance_2dim__);
      stan::math::fill(sd_abundance, DUMMY_VAR__);
      
      current_statement__ = 9;
      assign(sd_abundance,
        multiply(
          to_matrix(append_row(sd_abundance_norm, global_scale_abundance),
            NSB, (NFB - 1)), prior_scale_a),
        "assigning variable sd_abundance");
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_prevalence;
      beta_prevalence = Eigen::Matrix<local_scalar_t__, -1, -1>(NB_s, NB_f);
      stan::math::fill(beta_prevalence, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(beta_prevalence,
        elt_divide(
          multiply(multiply(X_s_full_inv, prevalence), X_f_full_inv),
          rvalue(sd_prevalence, "sd_prevalence",
            index_multi(idx_s), index_multi(idx_f))),
        "assigning variable beta_prevalence");
      Eigen::Matrix<local_scalar_t__, -1, -1> beta_abundance;
      beta_abundance = Eigen::Matrix<local_scalar_t__, -1, -1>(NB_s, beta_abundance_2dim__);
      stan::math::fill(beta_abundance, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(beta_abundance, abundance, "assigning variable beta_abundance");
      current_statement__ = 12;
      assign(beta_abundance,
        subtract(
          stan::model::deep_copy(
            rvalue(beta_abundance, "beta_abundance",
              index_min(((NB_s - NS) + 1)), index_min((NB_f - NF)))),
          rep_matrix(multinomial_nuisance, NF)),
        "assigning variable beta_abundance", index_min(((NB_s - NS) + 1)),
                                               index_min((NB_f - NF)));
      current_statement__ = 13;
      assign(beta_abundance,
        elt_divide(
          multiply(
            multiply(X_s_full_inv, stan::model::deep_copy(beta_abundance)),
            rvalue(X_f_full_inv, "X_f_full_inv", index_min(2), index_min(2))),
          rvalue(sd_abundance, "sd_abundance",
            index_multi(idx_s), index_multi(idx_f2))),
        "assigning variable beta_abundance");
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= NSB; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= NFB; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "sd_prevalence[sym1__, sym2__]",
                                 rvalue(sd_prevalence, "sd_prevalence",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= NSB; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= sd_abundance_2dim__; ++sym2__) {
          current_statement__ = 9;
          check_greater_or_equal(function__, "sd_abundance[sym1__, sym2__]",
                                 rvalue(sd_abundance, "sd_abundance",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      {
        current_statement__ = 14;
        lp_accum__.add(std_normal_lpdf<false>(global_scale_prevalence));
        current_statement__ = 15;
        lp_accum__.add(std_normal_lpdf<false>(global_scale_abundance));
        current_statement__ = 16;
        lp_accum__.add(
          student_t_lpdf<false>(sd_prevalence_norm, 5, 0,
            global_scale_prevalence));
        current_statement__ = 17;
        lp_accum__.add(
          student_t_lpdf<false>(sd_abundance_norm, 5, 0,
            global_scale_abundance));
        current_statement__ = 18;
        lp_accum__.add(
          student_t_lpdf<false>(to_vector(beta_prevalence), 5, 0, 1));
        current_statement__ = 19;
        lp_accum__.add(
          student_t_lpdf<false>(to_vector(beta_abundance), 5, 0, 1));
        current_statement__ = 26;
        for (int f = 1; f <= NF; ++f) {
          int f2;
          f2 = std::numeric_limits<int>::min();
          
          current_statement__ = 20;
          f2 = ((NB_f - NF) + f);
          current_statement__ = 24;
          for (int s = 1; s <= NS; ++s) {
            int s2;
            s2 = std::numeric_limits<int>::min();
            
            current_statement__ = 21;
            s2 = ((NB_s - NS) + s);
            current_statement__ = 22;
            lp_accum__.add(
              zip_lpmf<false>(
                rvalue(count, "count", index_uni(f), index_uni(s)),
                rvalue(prevalence, "prevalence",
                  index_uni(s2), index_uni(f2)),
                rvalue(abundance, "abundance",
                  index_uni(s2), index_uni((f2 - 1))), pstream__));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "zip_glm_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double global_scale_prevalence;
      global_scale_prevalence = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      global_scale_prevalence = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                                  0, lp__);
      double global_scale_abundance;
      global_scale_abundance = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      global_scale_abundance = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                                 0, lp__);
      Eigen::Matrix<double, -1, 1> sd_prevalence_norm;
      sd_prevalence_norm = Eigen::Matrix<double, -1, 1>(sd_prevalence_norm_1dim__);
      stan::math::fill(sd_prevalence_norm, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      sd_prevalence_norm = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                             0, lp__, sd_prevalence_norm_1dim__);
      Eigen::Matrix<double, -1, 1> sd_abundance_norm;
      sd_abundance_norm = Eigen::Matrix<double, -1, 1>(sd_abundance_norm_1dim__);
      stan::math::fill(sd_abundance_norm, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      sd_abundance_norm = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                            0, lp__, sd_abundance_norm_1dim__);
      Eigen::Matrix<double, -1, -1> prevalence;
      prevalence = Eigen::Matrix<double, -1, -1>(NB_s, NB_f);
      stan::math::fill(prevalence, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      prevalence = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                     NB_s, NB_f);
      Eigen::Matrix<double, -1, -1> abundance;
      abundance = Eigen::Matrix<double, -1, -1>(NB_s, abundance_2dim__);
      stan::math::fill(abundance, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      abundance = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    NB_s, abundance_2dim__);
      Eigen::Matrix<double, -1, 1> multinomial_nuisance;
      multinomial_nuisance = Eigen::Matrix<double, -1, 1>(NS);
      stan::math::fill(multinomial_nuisance, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 7;
      multinomial_nuisance = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                               NS);
      Eigen::Matrix<double, -1, -1> sd_prevalence;
      sd_prevalence = Eigen::Matrix<double, -1, -1>(NSB, NFB);
      stan::math::fill(sd_prevalence, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> sd_abundance;
      sd_abundance = Eigen::Matrix<double, -1, -1>(NSB, sd_abundance_2dim__);
      stan::math::fill(sd_abundance, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> beta_prevalence;
      beta_prevalence = Eigen::Matrix<double, -1, -1>(NB_s, NB_f);
      stan::math::fill(beta_prevalence, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> beta_abundance;
      beta_abundance = Eigen::Matrix<double, -1, -1>(NB_s, beta_abundance_2dim__);
      stan::math::fill(beta_abundance, std::numeric_limits<double>::quiet_NaN());
      
      
      vars__.emplace_back(global_scale_prevalence);
      vars__.emplace_back(global_scale_abundance);
      for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
        vars__.emplace_back(sd_prevalence_norm[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
        vars__.emplace_back(sd_abundance_norm[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          vars__.emplace_back(
            rvalue(prevalence, "prevalence",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= abundance_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          vars__.emplace_back(
            rvalue(abundance, "abundance",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        vars__.emplace_back(multinomial_nuisance[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      assign(sd_prevalence,
        multiply(
          to_matrix(
            append_row((100 * global_scale_prevalence),
              append_row(sd_prevalence_norm, global_scale_prevalence)), NSB,
            NFB), prior_scale_p), "assigning variable sd_prevalence");
      current_statement__ = 9;
      assign(sd_abundance,
        multiply(
          to_matrix(append_row(sd_abundance_norm, global_scale_abundance),
            NSB, (NFB - 1)), prior_scale_a),
        "assigning variable sd_abundance");
      current_statement__ = 10;
      assign(beta_prevalence,
        elt_divide(
          multiply(multiply(X_s_full_inv, prevalence), X_f_full_inv),
          rvalue(sd_prevalence, "sd_prevalence",
            index_multi(idx_s), index_multi(idx_f))),
        "assigning variable beta_prevalence");
      current_statement__ = 11;
      assign(beta_abundance, abundance, "assigning variable beta_abundance");
      current_statement__ = 12;
      assign(beta_abundance,
        subtract(
          stan::model::deep_copy(
            rvalue(beta_abundance, "beta_abundance",
              index_min(((NB_s - NS) + 1)), index_min((NB_f - NF)))),
          rep_matrix(multinomial_nuisance, NF)),
        "assigning variable beta_abundance", index_min(((NB_s - NS) + 1)),
                                               index_min((NB_f - NF)));
      current_statement__ = 13;
      assign(beta_abundance,
        elt_divide(
          multiply(
            multiply(X_s_full_inv, stan::model::deep_copy(beta_abundance)),
            rvalue(X_f_full_inv, "X_f_full_inv", index_min(2), index_min(2))),
          rvalue(sd_abundance, "sd_abundance",
            index_multi(idx_s), index_multi(idx_f2))),
        "assigning variable beta_abundance");
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= NSB; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= NFB; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "sd_prevalence[sym1__, sym2__]",
                                 rvalue(sd_prevalence, "sd_prevalence",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= NSB; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= sd_abundance_2dim__; ++sym2__) {
          current_statement__ = 9;
          check_greater_or_equal(function__, "sd_abundance[sym1__, sym2__]",
                                 rvalue(sd_abundance, "sd_abundance",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= NFB; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            vars__.emplace_back(
              rvalue(sd_prevalence, "sd_prevalence",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= sd_abundance_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            vars__.emplace_back(
              rvalue(sd_abundance, "sd_abundance",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta_prevalence, "beta_prevalence",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= beta_abundance_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta_abundance, "beta_abundance",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double global_scale_prevalence;
      global_scale_prevalence = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      global_scale_prevalence = context__.vals_r("global_scale_prevalence")[
          (1 - 1)];
      double global_scale_prevalence_free__;
      global_scale_prevalence_free__ = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 1;
      global_scale_prevalence_free__ = stan::math::lb_free(
                                         global_scale_prevalence, 0);
      double global_scale_abundance;
      global_scale_abundance = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      global_scale_abundance = context__.vals_r("global_scale_abundance")[
          (1 - 1)];
      double global_scale_abundance_free__;
      global_scale_abundance_free__ = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 2;
      global_scale_abundance_free__ = stan::math::lb_free(
                                        global_scale_abundance, 0);
      Eigen::Matrix<double, -1, 1> sd_prevalence_norm;
      sd_prevalence_norm = Eigen::Matrix<double, -1, 1>(sd_prevalence_norm_1dim__);
      stan::math::fill(sd_prevalence_norm, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> sd_prevalence_norm_flat__;
        current_statement__ = 3;
        sd_prevalence_norm_flat__ = context__.vals_r("sd_prevalence_norm");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(sd_prevalence_norm, sd_prevalence_norm_flat__[(pos__ - 1)],
            "assigning variable sd_prevalence_norm", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sd_prevalence_norm_free__;
      sd_prevalence_norm_free__ = Eigen::Matrix<double, -1, 1>(sd_prevalence_norm_1dim__);
      stan::math::fill(sd_prevalence_norm_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sd_prevalence_norm_free__,
          stan::math::lb_free(sd_prevalence_norm[(sym1__ - 1)], 0),
          "assigning variable sd_prevalence_norm_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> sd_abundance_norm;
      sd_abundance_norm = Eigen::Matrix<double, -1, 1>(sd_abundance_norm_1dim__);
      stan::math::fill(sd_abundance_norm, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> sd_abundance_norm_flat__;
        current_statement__ = 4;
        sd_abundance_norm_flat__ = context__.vals_r("sd_abundance_norm");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
          current_statement__ = 4;
          assign(sd_abundance_norm, sd_abundance_norm_flat__[(pos__ - 1)],
            "assigning variable sd_abundance_norm", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sd_abundance_norm_free__;
      sd_abundance_norm_free__ = Eigen::Matrix<double, -1, 1>(sd_abundance_norm_1dim__);
      stan::math::fill(sd_abundance_norm_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(sd_abundance_norm_free__,
          stan::math::lb_free(sd_abundance_norm[(sym1__ - 1)], 0),
          "assigning variable sd_abundance_norm_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, -1> prevalence;
      prevalence = Eigen::Matrix<double, -1, -1>(NB_s, NB_f);
      stan::math::fill(prevalence, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prevalence_flat__;
        current_statement__ = 5;
        prevalence_flat__ = context__.vals_r("prevalence");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            current_statement__ = 5;
            assign(prevalence, prevalence_flat__[(pos__ - 1)],
              "assigning variable prevalence", index_uni(sym2__),
                                                 index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> abundance;
      abundance = Eigen::Matrix<double, -1, -1>(NB_s, abundance_2dim__);
      stan::math::fill(abundance, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> abundance_flat__;
        current_statement__ = 6;
        abundance_flat__ = context__.vals_r("abundance");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= abundance_2dim__; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            current_statement__ = 6;
            assign(abundance, abundance_flat__[(pos__ - 1)],
              "assigning variable abundance", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> multinomial_nuisance;
      multinomial_nuisance = Eigen::Matrix<double, -1, 1>(NS);
      stan::math::fill(multinomial_nuisance, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> multinomial_nuisance_flat__;
        current_statement__ = 7;
        multinomial_nuisance_flat__ = context__.vals_r("multinomial_nuisance");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
          current_statement__ = 7;
          assign(multinomial_nuisance,
            multinomial_nuisance_flat__[(pos__ - 1)],
            "assigning variable multinomial_nuisance", index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(global_scale_prevalence_free__);
      vars__.emplace_back(global_scale_abundance_free__);
      for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
        vars__.emplace_back(sd_prevalence_norm_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
        vars__.emplace_back(sd_abundance_norm_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          vars__.emplace_back(
            rvalue(prevalence, "prevalence",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= abundance_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          vars__.emplace_back(
            rvalue(abundance, "abundance",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
        vars__.emplace_back(multinomial_nuisance[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"global_scale_prevalence",
      "global_scale_abundance", "sd_prevalence_norm", "sd_abundance_norm",
      "prevalence", "abundance", "multinomial_nuisance", "sd_prevalence",
      "sd_abundance", "beta_prevalence", "beta_abundance"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(sd_prevalence_norm_1dim__)},
      std::vector<size_t>{static_cast<size_t>(sd_abundance_norm_1dim__)},
      std::vector<size_t>{static_cast<size_t>(NB_s),
                          static_cast<size_t>(NB_f)},
      std::vector<size_t>{static_cast<size_t>(NB_s),
                          static_cast<size_t>(abundance_2dim__)},
      std::vector<size_t>{static_cast<size_t>(NS)},
      std::vector<size_t>{static_cast<size_t>(NSB), static_cast<size_t>(NFB)},
      std::vector<size_t>{static_cast<size_t>(NSB),
                          static_cast<size_t>(sd_abundance_2dim__)},
      std::vector<size_t>{static_cast<size_t>(NB_s),
                          static_cast<size_t>(NB_f)},
      std::vector<size_t>{static_cast<size_t>(NB_s),
                          static_cast<size_t>(beta_abundance_2dim__)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "global_scale_prevalence");
    param_names__.emplace_back(std::string() + "global_scale_abundance");
    for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_prevalence_norm" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_abundance_norm" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= abundance_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "multinomial_nuisance" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NFB; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= sd_abundance_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_abundance_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "global_scale_prevalence");
    param_names__.emplace_back(std::string() + "global_scale_abundance");
    for (int sym1__ = 1; sym1__ <= sd_prevalence_norm_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_prevalence_norm" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= sd_abundance_norm_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_abundance_norm" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= abundance_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= NS; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "multinomial_nuisance" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NFB; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= sd_abundance_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NSB; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= NB_f; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_prevalence" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= beta_abundance_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NB_s; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta_abundance" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"global_scale_prevalence\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_scale_abundance\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_prevalence_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_prevalence_norm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_abundance_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_abundance_norm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(NB_f) + "},\"block\":\"parameters\"},{\"name\":\"abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(abundance_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"multinomial_nuisance\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"sd_prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NSB) + ",\"cols\":" + std::to_string(NFB) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NSB) + ",\"cols\":" + std::to_string(sd_abundance_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(NB_f) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(beta_abundance_2dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"global_scale_prevalence\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"global_scale_abundance\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_prevalence_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_prevalence_norm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sd_abundance_norm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sd_abundance_norm_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(NB_f) + "},\"block\":\"parameters\"},{\"name\":\"abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(abundance_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"multinomial_nuisance\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NS) + "},\"block\":\"parameters\"},{\"name\":\"sd_prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NSB) + ",\"cols\":" + std::to_string(NFB) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NSB) + ",\"cols\":" + std::to_string(sd_abundance_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_prevalence\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(NB_f) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta_abundance\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NB_s) + ",\"cols\":" + std::to_string(beta_abundance_2dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = zip_glm_model_namespace::zip_glm_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return zip_glm_model_namespace::profiles__;
}

#endif


